from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher.filters import Text
from Keyboards import get_kb, get_cancel_kb
from commands import GREETING
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
from datetime import datetime
import asyncio
from database import conn, cursor
from config import TOKEN_API

tasks = {}
storage = MemoryStorage()
bot = Bot(TOKEN_API) # put here your token
disp = Dispatcher(bot, storage=storage)


class ClientStatesGroup(StatesGroup):
    """—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞"""
    
    write_an_event = State()
    write_a_date = State()


@disp.message_handler(commands=["start"])
async def start_cmd(message: types.Message) -> None:
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    await message.answer(text=GREETING, reply_markup=get_kb())


@disp.message_handler(Text(equals="‚ùå –û—Ç–º–µ–Ω–∞"), state="*")
async def cancel_cmd(message: types.Message, state: FSMContext) -> None:
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    
    if state is None:
        return 
    
    await message.answer("–¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_kb())
    await state.finish()   


@disp.message_handler(Text(equals="‚úèÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É"))
async def getting_task(message: types.Message) -> None:
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", reply_markup=get_cancel_kb())
    await ClientStatesGroup.write_an_event.set()


@disp.message_handler(Text(equals="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"))
async def show_all(message: types.Message) -> None:
    """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    cursor.execute("SELECT task_time, task_text FROM tasks")
    tasks_list = cursor.fetchall()
    
    #—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    if len(tasks) < 1:
        await message.answer("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–¥–∞—á ü´§")
    
    # –ø—Ä–æ—Ö–æ–¥ –ø–æ —Å–ª–æ–≤–∞—Ä—é tasks –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è    
    else:
        tasks_list = "\n".join(f"{time}: {task}" for time, task in tasks.items())
        await message.answer(f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n{tasks_list}")


@disp.message_handler(state=ClientStatesGroup.write_an_event)
async def writing_task(message: types.Message, state: FSMContext) -> None:
    """—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    async with state.proxy() as data:
        data["task"] = message.text
         
    await message.answer(f"—Å–æ–±—ã—Ç–∏–µ {data['task']} –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–æ–≥–¥–∞ –µ–≥–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ß–ß:MM")
    await ClientStatesGroup.next()


async def send_reminder(message: types.Message, state: FSMContext, task_time, data: dict) -> None:
    """—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º –≤—Ä–µ–º—è"""
    
    cursor.execute("INSERT INTO tasks (task_text, task_time) VALUES (?, ?)",
    (data['task'], task_time.strftime("%Y-%m-%d %H:%M:%S")))
    conn.commit()
        
    tasks[task_time] = data['task']   
    await message.answer(f"–∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {task_time}", reply_markup=get_kb())
    await state.finish()

    await asyncio.sleep((task_time - datetime.now()).seconds)     
    await bot.send_message(chat_id=message.chat.id, text = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {data['task']}")
    del tasks[task_time]
            

@disp.message_handler(state=ClientStatesGroup.write_a_date)
async def writing_date(message: types.Message, state: FSMContext) -> None:
    """—Ñ—É–Ω—Ü–∏—è  –∑–∞–ø–∏—Å–∏ –¥–∞—Ç—ã 

    Args:
        message (types.Message): —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state (FSMContext): —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
    """
    #–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç—É
    try:  
        time =datetime.strptime(message.text, "%d.%H:%M").time()
        task_time = datetime.combine(datetime.now().date(), time)
        
        async with state.proxy() as data:
            data["time"] = time
        
        if task_time <= datetime.now():
            await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ")
            
        else:
            await send_reminder(message, state, task_time, data)
      
    # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –¥–∞—Ç—É –Ω–µ —Å–ª–µ–¥—É—è —Ñ–æ—Ä–º–∞—Ç—É        
    except (ValueError, IndexError):
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ß–ß:MM")      


if __name__ == "__main__":
    try:
        executor.start_polling(disp, skip_updates=True)
    finally:
        conn.close()